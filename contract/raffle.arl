archetype raffle(
  owner        : address,
  min_duration : duration,
  jackpot      : tez,
  ticket_price : tez,
  reveal_fee   : rational)

variable close_date        : option<date>   = none
variable desc              : option<string> = none

asset player {
  id                 : address;
  locked_raffle_key  : chest;
}

variable raffle_key  : nat = 0
variable nb_revealed : nat = 0

states =
| Created initial
| Running
| Transferred

transition open(cd : date, d : string) {
  called by owner
  require {
    r0 : now + min_duration < cd   otherwise "INVALID_CLOSE_DATE";
    r1 : transferred = jackpot     otherwise "INVALID_AMOUNT"
  }
  from Created to Running
  with effect {
    close_date        := some(cd);
    desc              := some(d);
  }
}

entry buy (lrk : chest) {
  state is Running
  require {
    r2 : transferred = ticket_price otherwise "INVALID_TICKET_PRICE";
    r3 : now < opt_get(close_date)  otherwise "RAFFLE_CLOSED"
  }
  effect { player.add({ caller; lrk }) }
}

transition transfer_jackpot() {
  called by selfaddress
  from Running to Transferred
  with effect {
    transfer balance to player.nth(raffle_key % player.count());
    player.clear()
  }
}

entry reveal(pl : address, k : chest_key, time : nat) {
  state is Running
  require {
    r4 : now > opt_get(close_date) otherwise "RAFFLE_OPEN";
  }
  effect {
    match open_chest(k, player[pl].locked_raffle_key, time) with
    | left (unlocked) -> raffle_key += opt_get(unpack<nat>(unlocked))
    | right(error)    -> fail("INVALID_TIMELOCK")
    end;
    nb_revealed += 1;
    transfer (reveal_fee * ticket_price) to caller;
    if nb_revealed = player.count() then
    transfer 0tz to entry self.transfer_jackpot()
  }
}


